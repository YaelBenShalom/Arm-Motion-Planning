#!/usr/bin/env python3

"""
 The turtle_interpret node translates a custom velocity message into a
 geometry_msgs/Twist that can be used by the turtlesim
SUBSCRIBES:
  TurtleVel
"""

import sys
import copy
import rospy
import moveit_commander
import moveit_msgs.msg
from geometry_msgs.msg import Twist, Pose, Point, PoseStamped, Quaternion, Vector3
from nav_msgs.msg import Path
from std_msgs.msg import String
from std_srvs.srv import Empty, EmptyResponse
from arm_move.srv import Step
from math import pi
from moveit_commander.conversions import pose_to_list
from moveit_msgs.msg import MoveItErrorCodes

class Mover:

    def __init__(self):
        moveit_commander.roscpp_initialize(sys.argv) # initialize moveit_commander

        # Set parameters:
        self.x_list = rospy.get_param('/px100/mover/waypoints').get('x')
        self.y_list = rospy.get_param('/px100/mover/waypoints').get('y')
        self.z_list = rospy.get_param('/px100/mover/waypoints').get('z')
        self.gripper_list = rospy.get_param('/px100/mover/waypoints').get('gripper')
        self.robot_name = rospy.get_param("~robot_name")
        self.dof = rospy.get_param("~dof")

        # Instantiate a `RobotCommander` object. This object is the outer-level interface to
        # the robot:
        self.robot = moveit_commander.RobotCommander() 

        # Instantiate a `PlanningSceneInterface` object. This object is an interface to the
        # world surrounding the robot:
        self.scene = moveit_commander.PlanningSceneInterface()

        # Instantiate a `MoveGroupCommander` object. This object is an interface
        # to one group of joints. In this case the group is the joints in the Interbotix
        # arm so we set `group_name = interbotix_arm`. If you are using a different robot,
        # you should change this value to the name of your robot arm planning group.
        # This interface can be used to plan and execute motions on the Interbotix Arm:
        self.move_group = moveit_commander.MoveGroupCommander("interbotix_arm")
        self.gripper_group = moveit_commander.MoveGroupCommander('interbotix_gripper')
        
        # We create a `DisplayTrajectory` publisher which is used later to publish
        # trajectories for RViz to visualize: 
        self.display_trajectory_publisher = rospy.Publisher('/move_group/display_planned_path',
                                                            moveit_msgs.msg.DisplayTrajectory,
                                                            queue_size=20)

        # We can get the name of the reference frame for this robot:
        self.planning_frame = self.move_group.get_planning_frame()
        print("============ Planning frame: %s" % self.planning_frame)

        # We can also print the name of the end-effector link for this group:
        self.eef_link = self.move_group.get_end_effector_link()
        print("============ End effector link: %s" % self.eef_link)

        # We can get a list of all the groups in the robot:
        self.group_names = self.robot.get_group_names()
        print("============ Available Planning Groups:", self.robot.get_group_names())

        # Sometimes for debugging it is useful to print the entire state of the robot:
        print("============ Printing robot state")
        print(self.robot.get_current_state())
        print("")

        #Initialize table position:
        box_pose = PoseStamped()
        box_pose.header.frame_id = "world"
        box_pose.pose.position.x = 0
        box_pose.pose.position.y = 0
        box_pose.pose.position.z = -0.05
        box_name = "table"
        self.scene.add_box(box_name, box_pose, size=(1, 1, 0.1))

        self.waypoints = []
        self.sleep = 0.5
        self.reset = rospy.Service("reset", Empty, self.reset_callback)
        self.step = rospy.Service("step", Step, self.step_callback)
        self.follow = rospy.Service("follow", Empty, self.follow_callback)
        
        # Initialize position to home position:
        rospy.wait_for_service('reset')
        reset = rospy.ServiceProxy('reset', Empty)
        reset()

        # rospy.sleep(self.sleep)
        # rospy.wait_for_service('follow')
        # follow = rospy.ServiceProxy('follow', Empty)
        # follow()


    def reset_callback(self, message): 
        """ Callback function for reset service (type - Empty).
        The service:
        - Takes a position and orientation of the realsense box and creates/moves
          the Realsense Box to the appropriate location.
        - Moves the robot to its pre-defined 'Home' position without hitting the box.
        - Reset takes a parameter that determines if a series of waypoints are cleared
          or not.
          
        Return: EmptyResponse
        """
        rospy.logdebug(f"Reset Message")
        box_pose = PoseStamped()
        box_pose.header.frame_id = 'world'
        box_pose.pose.orientation.w = 1.0
        box_pose.pose.position.x = 0.18
        box_pose.pose.position.y = 0
        box_pose.pose.position.z = 0.025
        box_name = "realsense_box"
        self.scene.add_box(box_name, box_pose, size=(0.09, 0.14, 0.052))

        self.move_group.set_named_target("Home")
        self.move_group.go()
        self.move_group.stop()
        self.move_group.clear_pose_targets()

        # TODO - Reset takes a parameter that determines if a series of waypoints are cleared or not.

        return EmptyResponse()


    def step_callback(self, message): 
        """ Callback function for step service (type - Step).
        The service moves the robot to a user-specified position.

        Return: MoveItErrorCode to indicate success or failure of the plan
        """
        rospy.logdebug(f"Step Message")
        waypoint = message.pose
        gripper = message.gripper

        self.move_group.set_pose_target(waypoint)
        self.move_group.go(wait=True)
        self.move_group.stop()
        self.move_group.clear_pose_targets()

        if gripper:
            self.gripper_group.set_named_target("Closed")
        else:
            self.gripper_group.set_named_target("Open") 
        self.gripper_group.go()
        self.gripper_group.stop()
        self.gripper_group.clear_pose_targets()
        self.waypoints.append(waypoint)


        return [] # TODO
        # else:
        #     return []

    def follow_callback(self, message): 
        """ Callback function for follow service (type - Empty).
        The service has the robots move to each waypoint, in sequence.

        Return: EmptyResponse
        """
        rospy.logdebug(f"Follow Message")
        rospy.wait_for_service('step')
        step = rospy.ServiceProxy('step', Step)

        for i in range(len(self.x_list)):
            step_msg = Step()
            pose_goal = Pose()
            pose_goal.orientation.w = 1.0
            pose_goal.position.x = self.x_list[i]
            pose_goal.position.y = self.y_list[i]
            pose_goal.position.z = self.z_list[i]
            step_msg.gripper = self.gripper_list[i]
            step_msg.pose = copy.deepcopy(pose_goal)
            step(step_msg.pose, step_msg.gripper)
            rospy.sleep(self.sleep)

        return EmptyResponse()

def main():
    """ The main() function. """
    rospy.init_node('mover', log_level=rospy.DEBUG)
    Mover()
    rospy.spin()

if __name__ == '__main__':
    try:
        main()
    except rospy.ROSInterruptException:
        pass