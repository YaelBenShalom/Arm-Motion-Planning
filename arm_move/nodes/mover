#!/usr/bin/env python3

"""
 The turtle_interpret node translates a custom velocity message into a
 geometry_msgs/Twist that can be used by the turtlesim
SUBSCRIBES:
  TurtleVel
"""

import rospy
import moveit_commander
import moveit_msgs.msg
from geometry_msgs.msg import Twist, Pose, Point, PoseStamped, Quaternion, Vector3
from nav_msgs.msg import Path
from std_msgs.msg import String
from std_srvs.srv import Empty, EmptyResponse
from math import pi
from moveit_commander.conversions import pose_to_list
from moveit_msgs.msg import MoveItErrorCodes

def turtle_twist(xdot, omega):
    """ Create a twist suitable for a turtle

        Args:
           xdot (float) : the forward velocity
           omega (float) : the angular velocity

        Returns:
           Twist - a 2D twist object corresponding to linear/angular velocity
    """
    return Twist(linear = Vector3(x = xdot, y = 0, z = 0),
                  angular = Vector3(x = 0, y = 0, z = omega))


class Mover:

    def __init__(self):
        moveit_commander.roscpp_initialize(sys.argv) # initialize moveit_commander
        self.robot_name = "px100"

        # self.sub = rospy.Subscriber("/turtle_vel", TurtleVel, self.turtle_vel_callback)
        # self.pub = rospy.Publisher("/cmd_vel", Twist, queue_size = 10)
        self.display_trajectory_publisher = rospy.Publisher('/move_group/display_planned_path',
                                                            moveit_msgs.msg.DisplayTrajectory,
                                                            queue_size=20)
        self.reset = rospy.Service("reset", Empty, self.reset_callback)
        self.step = rospy.Service("step", Empty, self.step_callback)
        self.follow = rospy.Service("follow", Empty, self.follow_callback)

        self.robot = moveit_commander.RobotCommander() # Instantiate a RobotCommander object
        self.scene = moveit_commander.PlanningSceneInterface() #Instantiate a PlanningSceneInterface object

        group_name = "interbotix_arm"
        self.move_group = moveit_commander.MoveGroupCommander(group_name) # Instantiate a MoveGroupCommander object

        # We can get the name of the reference frame for this robot:
        planning_frame = self.move_group.get_planning_frame()
        print("============ Planning frame: %s" % planning_frame)

        # We can also print the name of the end-effector link for this group:
        eef_link = self.move_group.get_end_effector_link()
        print("============ End effector link: %s" % eef_link)

        # We can get a list of all the groups in the robot:
        group_names = self.robot.get_group_names()
        print("============ Available Planning Groups:", self.robot.get_group_names())

        # Sometimes for debugging it is useful to print the entire state of the robot:
        print("============ Printing robot state")
        print(self.robot.get_current_state())
        print("")


        object_pose = PoseStamped()
        object_pose.header.frame_id = "world"
        object_pose.pose.position.x = 0
        object_pose.pose.position.y = 0
        object_pose.pose.position.x = -0.05
        object_name = "table"
        self.scene.add_box(object_name, object_pose, size=(1, 1, 0.1))


    def reset_callback(self, message): 
        """ Callback function for resume service (type - Empty).
        The service resume the turtlebot movement with the stored velocity
        values.
        Args: None
        Return: EmptyResponse
        """
        rospy.logdebug(f"Reset Message")
        object_pose = PoseStamped()
        object_pose.header.frame_id = 'world'
        object_pose.pose.orientation.w = 0
        object_pose.pose.position.x = 0
        object_pose.pose.position.y = 0
        object_pose.pose.position.z = 0
        object_name = "realsense_box"
        self.scene.add_box(object_name, object_pose, size=(0.142, 0.091, 0.051))

        return EmptyResponse()

    def step_callback(self, message): 
        """ Callback function for resume service (type - Empty).
        The service resume the turtlebot movement with the stored velocity
        values.
        Args: None
        Return: EmptyResponse
        """
        rospy.logdebug(f"Step Message")


        return EmptyResponse()

    def follow_callback(self, message): 
        """ Callback function for resume service (type - Empty).
        The service resume the turtlebot movement with the stored velocity
        values.
        Args: None
        Return: EmptyResponse
        """
        rospy.logdebug(f"Follow Message")


        return EmptyResponse()

def main():
    """ The main() function. """
    rospy.init_node('mover', log_level=rospy.DEBUG)
    Mover()
    rospy.spin()

if __name__ == '__main__':
    try:
        main()
    except rospy.ROSInterruptException:
        pass